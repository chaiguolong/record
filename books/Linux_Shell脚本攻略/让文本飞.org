#+startup: overview
#+title: Linux_Shell脚本攻略
#+author: dream

* 第四章:让文本飞
** 4.1 简介
** 4.2 正则表达式入门
    正则表达式是基于样式匹配的文本处理技术的关键所在.
*** 4.2.1 预备知识
   正则表达式是用于绝大多数文本处理工具的一种语言.
*** 4.2.2 实战演练
    本节将会让你简单了解一下正则表达式,POSIX字符类以及元字符.
    先来看一看正则表达式的基本组成部分,如下所示:
|--------+------------------+---------------------|
| 正则   | 描述             | 示例                |
| 表达式 |                  |                     |
|--------+------------------+---------------------|
| \^     | 起始行标记       | ^tux匹配以          |
|        |                  | tux起始的行         |
|--------+------------------+---------------------|
| \$     | 行尾标记         | tux$匹配以$         |
|        |                  | tux结尾的行         |
|--------+------------------+---------------------|
|        |                  | Hack.匹配Hackl和    |
| .      | 匹配任           | Hacki,但是不能匹配  |
|        | 意一个字符       | Hackl2和Hackil,它   |
|        |                  | 只能匹配单个字符    |
|--------+------------------+---------------------|
| []     | 匹配包含在[字符] | coo[k]匹配          |
|        | 之中的           | cook或cool          |
|        | 任意一个字符     |                     |
|--------+------------------+---------------------|
| [^]    | 匹配除[^字符]     | 9[^01]匹配92         |
|        | 之外的任意字符   | ,93,但是不匹        |
|        |                  | 配91或90            |
|--------+------------------+---------------------|
| [-]    | 匹配[]中         | [1-5]匹配从         |
|        | 指定范围内的     | 1~5的任意一个       |
|        | 任意一个字符     | 数字                |
|--------+------------------+---------------------|
| ?      | 匹配之前的       | colou?r匹配         |
|        | 项1次或0次       | color或colour,但是  |
|        |                  | 不能匹配colouur     |
|--------+------------------+---------------------|
| +      | 匹配之前         | Rollno-9+匹配       |
|        | 的项1次或多次    | Rollno-99,Rollno-9, |
|        |                  | 但是不能匹配        |
|        |                  | Rollno-             |
|--------+------------------+---------------------|
| \*     | 匹配之前的项     | co*l匹配cl,col,     |
|        | 0次或多次        | coool等             |
|--------+------------------+---------------------|
| ()     | 创建一个用       | max(tri)?匹配max    |
|        | 于匹配的子串     | 或maxtrix           |
|--------+------------------+---------------------|
| \vert      | 交替--匹配\vert      | Oct (1st \vert 2nd)匹配 |
|        | 两边的任意一项   | Oct 1st或Oct 2nd    |
|--------+------------------+---------------------|
| \      | 转义符可以将     | a\.b匹配a.b,但      |
|        | 上面介绍的特殊   | 不匹配ajb.通过在.   |
|        | 字符进行转义     | 之前加上前缀\,从而  |
|        |                  | 忽略了.的特殊意义   |
|--------+------------------+---------------------|

    POSIX字符类是一个形如[:...:]的特殊原序列,它可以
    用于匹配特定的字符范围.
    POSIX字符类如下所示:
|------------+------------------+-----------------|
| 正则表达式 | 描述             | 示例            |
|------------+------------------+-----------------|
| [:alnum:]  | 字母及数字字符   | [[[[:alnum:]]]]+    |
|------------+------------------+-----------------|
| [:alpha:]  | 字母字符(包括    |                 |
|            | 大写字母和小写   | [[[[:alpha:]]]](4)  |
|------------+------------------+-----------------|
| [:blank:]  | 空格和制表符     | [[[[:blank:]]]]*    |
|------------+------------------+-----------------|
| [:digit:]  | 数字字符         | [[[[:digit:]]]]?    |
|------------+------------------+-----------------|
| [:lower:]  | 小写字母         | [[[[:lower:]]]]{5,} |
|------------+------------------+-----------------|
| [:upper]   | 大写字母         | ([[[[:upper:]]]]+)? |
|------------+------------------+-----------------|
| [:punct:]  | 标点符号         | [[[[:punct:]]]]     |
|------------+------------------+-----------------|
| [:space]   | 包括换行符,回车  |                 |
|            | 等在内的所有空白 | [[[[:space:]]]]+    |
|            | 符号             |                 |
|------------+------------------+-----------------|

    元字符是一种Perl风格的正则表达式,只有一部分文本
    处理工具支持它.
*** 4.2.3 工作原理
    - 匹配给定文本中的所有单词:
      (?[a-zA-Z]+?)
      注意: ?用于匹配单词前后可能出现的空格
    - 匹配一个IP地址:
      [0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}
      或者
      [[[[:digit:]]]]{1,3}\.[[[[:digit:]]]]{1,3}\.[[[[:digit:]]]]
      {1,3}\.[[[[:digit:]]]]{1,3}
*** 4.2.4 补充内容
** 4.3 用grep在文件中搜索文本
*** 4.3.1 预备知识
        grep命令是UNIX中用于文本搜索的大师级工具.它能够
    接受正则表达式和通配符.
*** 4.3.2 实战演练
    在文件中搜索一个单词:
    #+begin_src bash
      grep match_pattern filename
      # 或者
      grep "match_pattern" filename
    #+end_src

    也可以像下面这样从stdin中读取:
    #+begin_src bash
      echo -e "this is a word\nnext line" | grep word
    #+end_src

    一个grep命令也可以对多个文件进行搜索:
    #+begin_src bash
      grep "match_text" file1 file2 file3 ...
    #+end_src

    用--color选项可以在输出行中重点标记处匹配到的单词:
    #+begin_src bash
      grep word filename --color=auto
    #+end_src
    
    grep命令通常将match_pattern视为通配符.如果要使用正
    则表达式,则需要添加-E选项--这意味着使用扩展(extended)
    正则表达式,也可以使用默认允许正则表达式的grep命令--
    egrep.例如:
    #+begin_src bash
      grep -E "[a-z]+"
      # 或者
      egrep "[a-z]+"
    #+end_src

    为了只输出文件中匹配到的文本部分,可以使用选项-o:
    #+begin_src bash
      echo this is a line. | grep -o -E "[a-z]+\."
      # 或者
      # echo this is a line. | egrep -o "[a-z]+\."
    #+end_src

    要想打印除包含match__pattern的行之外的所有行,可使用:
    #+begin_src bash
      # 选项-v可以将匹配结果进行反转(invert)
      grep -v match_pattern file
    #+end_src

    统计文件或文本中包含匹配字符串的行数:
    #+begin_src bash
      grep -c "text" filename
    #+end_src

    注意:-c知识统计匹配行的数量,并不是匹配的次数.
    #+begin_src bash
      # 尽管有6个匹配项,但命令只打印2,这是因为只有
      # 2哥匹配行
      echo -e "1 2 3 4\nhello\n5 6" | grep -Ec "[0-9]"
    #+end_src

    为了文件中统计匹配项的数量,可以使用下面的技巧:
    #+begin_src bash
      echo -e "1 2 3 4\nhello\n5 6" | grep -Eo "[0-9]"\
      | wc -l
    #+end_src

    打印出包含匹配字符串的行数:
    #+begin_src bash
      grep linux -n sample1.txt
      # 或者
      cat sample1.txt | grep linux -n
    #+end_src

    如果使用多个文件,它也会随着输出结果打印出文件名:
    #+begin_src bash
      grep linux -n sample1.txt sample2.txt
    #+end_src

    打印样式匹配所位于的字符或字节偏移:
    #+begin_src bash
      echo gnu is not unix | grep -b -o "not"
    #+end_src

    搜索多个文件并找出匹配文本位于哪一个文件中:
    #+begin_src bash
      grep -l linux sample1.txt sample2.txt
    #+end_src

    和-l相反的选项是-L,它会返回一个不匹配的文件列表.

*** 4.3.3 补充内容
    1. 递归搜索文件
       #+begin_src bash
	 grep "text" . -R -n
       #+end_src

    2. 忽略样式中的大小写
       选项-i可以使匹配样式不考虑字符的大小写,例如:
       #+begin_src bash
	 echo hello world | grep -i "HELLO"
       #+end_src

    3. 用grep匹配多个样式
       在进行匹配的时候通常只指定一个样式.然而,我们
       可以用选项-e来指定多个匹配样式:
       #+begin_src bash
	 grep -e "pattern1" -e "pattern"
       #+end_src

       例如:
       #+begin_src bash
	 echo this is a line of text | grep -e "this"\
	  -e "line" -o
       #+end_src

       还有另一种方法也可以指定多个样式.我们可以提供一个
       样式文件用于读取样式.在样式文件中逐行写下需要匹配
       样式,然后用选项-f选项执行grep:
       #+begin_src bash
	 grep -f pattern_file source_filename
       #+end_src

       #+begin_src bash
	 echo hello this is cool | grep -f pat_file
       #+end_src

    4. 在grep搜索中包括或排除文件
       在目录中递归搜索所有的.c和.cpp文件
       #+begin_src bash
	 grep "main()" . -r --include *.{c,cpp}
       #+end_src

       在搜索中排除所有的README文件:
       #+begin_src bash
	 grep "main()" . -r --exclude "README"
       #+end_src

       如果需要排除目录,可以使用--exclude-dir选项.
       如果需要从文件中读取所需排除的文件列表,使用
       --exclude-from FILE.

    5. 使用0值字节后缀的grep与xargs
       grep 输出以0值字节作为终结符的文件名(\0).这可以用grep的
       -Z选项来指定.
       #+begin_src bash
	 grep "test" file* -lZ | xargs -0 rm
       #+end_src

    6. grep的静默输出

    7. 打印出匹配文本之前或之后的行

       打印匹配某个结果之后的三行,使用-A选项:
       #+begin_src bash
	 seq 10 | grep 5 -A 3
       #+end_src

       打印匹配某个结果之前的三行,使用-B选项:
       #+begin_src bash
	 seq 10 | grep 5 -B 3
       #+end_src

       打印匹配某个结果之前及之后的3行,使用-C选项:
       #+begin_src bash
	 seq 10 | grep 5 -C 3
       #+end_src

       如果有多个匹配,那么以一行"--"作为各匹配之间的定界符:
       #+begin_src bash
	 echo -e "a\nb\nc\na\nb\nc" | grep a -A 1
       #+end_src

       #+RESULTS:
       | a  |
       | b  |
       | -- |
       | a  |
       | b  |

** 4.4 用cut按列切分文件
    我们也许不需要按行,而是需要按列切分文件.
*** 4.4.1 预备知识
    cut是一个帮我们将文本按列进行切分的小工具.它也可以指定
    分隔每列的定界符
*** 4.4.2 实战演练
    为了提取第一个字段或列,可以使用下面的语法:
    cut -f FILE_LIST filename
    FIELD_LIST是需要显示的列.它由列号组成,彼此之间用逗号分隔.例如:
    cut -f 2,3 filename

    cut也能够从stdin中读取输入文本.
    制表符是字段或列的默认定界符.

    #+begin_src bash
      cut -f1 student_data.txt
    #+end_src

    要打印多列,需要提供一个由逗号分隔的列号列表作为-f选项的参数
    #+begin_src bash
      cut -f2,4 student_data.txt
    #+end_src

    我们也可以用--complement选项对提取的字段进行补集运算.
    打印出除第三列之外的所有的列,则可以使用:
    #+begin_src bash
      cut -f3 --complement student_data.txt
    #+end_src

    要制定字段的定界符,使用-d选项:
    #+begin_src bash
      cut -f2 -d";" delimited_data.txt
    #+end_src

*** 4.4.3 补充内容 
    cut命令有一些选项可以将一串字符作为列来显示.
    | 记法 | 范围                       |
    |-----+---------------------------|
    | N-  | 从第N个字节,字符或字段都行尾   |
    |-----+---------------------------|
    | N-M | 从第N个字节,字符或字段到第M个  |
    |     | (包括第M个在内)字节,字符或字段 |
    |-----+---------------------------|
    | -M  | 第1个字节,字符或字段到第M个    |
    |     | (包括第M个在内)字节,字符或字段 |
    |-----+---------------------------|

    用上面介绍的记法,再结合下列选项将某个范围的字节或字符指定为字段:
    * -b 表示字节;
    * -c 表示字符
    * -f 表示定义字段

    打印第一个到第五个字符:
    #+begin_src bash
      cut -c1-5 range_fields.txt
    #+end_src

    打印前2个字符:
    #+begin_src bash
      cut -c-2 range_fields.txt
    #+end_src

    在使用-c,-f和-b时,我们可以指定输出定界符:
    --output-delimiter "delimiter string"

    #+begin_src bash
      cut range_fields.txt -c1-3,6-9 --output-delimiter ","
    #+end_src

** 4.5 统计特定文件中的词频
    查找文件中使用单词的频率是一个很有意思的练习.
*** 4.5.1 预备知识
    我们可以使用关联数组,awk,sed,grep等不同的方式来解决这个问题
*** 4.5.2 实战演练
    见脚本word_freq.sh
** 4.6 sed入门
sed是stream editor(流编辑器)的缩写.sed命令众所周知的一个用法
是进行文本替换.
*** 4.6.1 实战演练
sed可以替换给定文本中的字符串.

sed 's/pattern/replace_string/' file
或者
cat file | sed 's/pattern/replace_string/'
这个命令从stdin中读取输入.

使用-i选项,可以将替换结果应用于原文件.很多用户在进行替换之后,借助
重定向来保存文件:

sed 's/text/replace/' file > newfile
mv newfile file

其实只需要一行命令就可以搞定,例如:

sed -i 's/text/replace/' file

如果要替换所有的内容,我们需要在命令尾部加上参数g,其方法如下:

sed 's/pattern/replace_string/g' file

#+begin_src bash
  echo this thisthisthis | sed 's/this/THIS/g'
#+end_src

字符/在sed中作为定界符使用.我们可以像下面一样使用任意的定界符:

sed 's:text:replace:g'
sed 's|text|replace|g'

当定界符出现在样式内部时,我们必须用前缀\对它进行转义:

sed 's|te\|xt|replace|g'

*** 4.6.2 补充内容
1) 移出空白行
   空白行可以用正则表达式^$进行匹配:
     sed '/^$/d' file
2) 已匹配字符串标记&
   在sed中,用&标记匹配样式的字符串,就能够在替换字符串时使用已匹配的
   内容.例如:
   #+begin_src bash
     echo this is an example | sed 's/\w\+/[&]/g'
   #+end_src
3) 子串匹配标记\1
   #+begin_src bash
     echo this is digit 7 in a number | \
     sed 's/digit \([0-9]\)/\1/'
   #+end_src

   这条命令将digit 7替换为7.样式中匹配到的子串是7.\(pattern\)用于匹配
   子串.模式被包括在使用斜线转义过的()中.对于匹配到的第一个子串,其对应的
   标记是\1,匹配到的第二个子串是\2,以此类推.下面的实力中包含了多个匹配:
   #+begin_src bash
     echo seven EIGHT | sed 's/\([a-z]\+\) \([A-Z]\+\)/\2 \1/'
   #+end_src

4) 组合多个表达式
   利用管道组合多个sed命令的方法可以用下面的方式替代

   sed 'exprression' | sed 'expression'

   它等价于

   sed 'expression; expression'

5) 引用
   sed表达式通常用单引号来引用.不过也可以使用双引号.双引号会通过对表达式
   求值来对其进行扩展.当我们想在sed表达式中使用一些变量字符串时,双引号就
   有用武之地了.例如:
   #+begin_src bash
     text=hello
     echo hello world |sed "s/$text/HELLO/"
   #+end_src

** 4.7 awk入门
*** 4.7.1 实战演练
awk脚本的结构基本如下所示:
awk 'BEGIN{print "start"} pattern { commands }' \
END{print "end"} file
*** 4.7.2 工作原理
awk命令的工作方式如下所示.
1. 执行BEGIN{commands}语句块中的语句.
2. 从文件或stdin中读取一行,然后执行pattern{commands}.重复
   这个过程,直到文件全部被读取完毕.
3. 当读至输入流(input stream)末尾时,执行pattern{commands}语句块.
   让我们看看下面的例子:
   #+begin_src bash
     echo -e "line1\nline2" | awk 'BEGIN{print "Start"} \
     {print} END{print "END"}'
   #+end_src

   当使用不带参数的print时,它会打印出当前行.关于print,需要记住两件
   重要的事情:当print的参数是以逗号进行分隔时,参数打印时则以空格作为
   定界符;在awk的print语句中,双引号是被当做拼接操作符(concaternation
    operator)使用的.例如:
    #+begin_src bash
      echo | awk '{ var1="v1"; var2="v2"; var3="v3"; \
      print var1,var2,var3;}'
    #+end_src

    拼接的使用方法如下:
    #+begin_src bash
      echo | awk '{ var1="v1"; var2="v2"; var3="v3"; \
      print var1"-"var2"-"var3; }'
    #+end_src

*** 4.7.3 补充内容
1 特殊变量

 以下是可以用于awk的一些特殊变量。

 * NR：表示记录数量（number of records），在执行过程中对应于当前行号。

 * NF：表示字段数量（number of fields），在执行过程中对应于当前行的字段数。

 * $0：这个变量包含执行过程中当前行的文本内容。

 * $1：这个变量包含第一个字段的文本内容。

 * $2：这个变量包含第二个字段的文本内容。
   
 打印每一行的第2和第3个字段：
    awk '{ print $3,$2 }' file

 要统计文件中的行数，使用下面的命令：
    awk 'END{ print NR }' file

   
2 将外部变量值传递给awk

 借助选项 -v，我们可以将外部值（并非来自stdin）传递给awk：

    #+begin_src 
	$ VAR=10000
	$ echo | awk -v VARIABLE=$VAR'{ print VARIABLE }'
    #+end_src


 还有另一种灵活的方法可以将多个外部变量传递给awk，例如：
    #+begin_src 
	var1="Variable1" ; var2="Variable2";
	echo | awk '{ print v1,v2 }' v1=$var1 v2=$var2
    #+end_src


 当输入来自于文件而非标准输入时，使用：
    awk '{ print v1,v2 }' v1=$var1 v2=$var2 filename

 在上面的方法中，变量之间用空格分隔，以键-值对的形式（v1=$var1 v2=$var2）作为awk的命名行参数紧随在BEGIN、{}和END语句块之后。

 
3 用getline读取行

 通常，grep默认读取一个文件的所有行。如果只想读取某一行，可以使用getline函数。有时候，我们需要从BEGIN语句块中读取第一行。

 语法：getline var

 变量var就包含了特定行的内容。

 如果调用不带参数的getline，我们可以用 $0、$1和$2访问文本行的内容。

 例如：
    seq 5 | awk 'BEGIN { getline; print "Read ahead first line", $0 } { print $0 }'

    
4 用样式对awk处理的行进行过滤

 我们可以为需要处理的行指定一些条件，例如：

    awk 'NR < 5' # 行号小于5的行
    awk 'NR==1,NR==4' #行号在1到5之间的行
    awk '/linux/' # 包含样式linux的行（可以用正则表达式来指定样式）
    awk '!/linux/' # 不包含包含样式linux的行

    
5 设置字段定界符

 默认的字段定界符是空格。我们也可以用 -F "delimiter"明确指定一个定界符：

    awk -F: '{ print $NF }' /etc/passwd
 或者
    awk 'BEGIN { FS=":" } { print $NF }' /etc/passwd

** 4.8 替换文本或文件中的字符串
** 4.9 压缩或解压缩JavaScript
** 4.10 对文件中的行,单词和字符进行迭代
** 4.11 按列合并文件
** 4.12 打印文件或行中的第n个单词或列
** 4.13 打印不同行或样式之间的文本
** 4.14 用脚本检验回文字符串
** 4.15 以逆序形式打印行
** 4.16 解析文本中的电子邮件地址和URL
** 4.17 打印文件中某个样式之前或之后的n行
** 4.18 在文件中移出包含某个单词的句子
** 4.19 用awk实现head,tail和tac
** 4.20 文本切片与参数操作
