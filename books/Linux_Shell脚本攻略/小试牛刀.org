#+startup: overview
** 第一章 小试牛刀
*** 1.1简介
**** 1).#!/bin/bash(shebang)
**** 2).有两种运行脚本的方式
1. 将脚本作为sh的命令行参数.
   #+begin_src bash
     sh script.sh
   #+end_src
   #+begin_src bash
     sh /home/path/script.sh
   #+end_src
2. 将脚本作为具有执行权限的可执行文件.
3. 如果将脚本作为sh的命令行参数来运行,那么脚本中的shebang行也就没有什么用处了.
4. 为了是shell脚本能够自己独立运行,需要具备可执行权限.要使脚本独立运行,必须利用shebang行.
   它通过使用位于#!之后的解释器来运行脚本.至于脚本的可执行权限,可以通过下方设置:
   #+begin_src bash
     chmod a+x script.sh
   #+end_src
5. Bash还维护了一个历史记录文件~/.bash_history.
6. 在Bash中,每个命令伙食命令序列是通过使用分号或换行符来分隔的.比如:
   $ cmd1;cmd2
   它等同于:
   $ cmd1
   $ cmd2

*** 1.2终端打印
**** 1.2.1实战演练
1. echo是用于终端打印的基本命令.在默认情况下,echo在每次调用后会添加一个换行符.
   #+begin_src bash
     echo "Welcome to Bash"
   #+end_src

   #+RESULTS:
   : Welcome to Bash
   只需要使用带双引号的文本,结合echo命令就可以将文本在终端中打印出来.
   类似的,不带双引号的文本也可以得到相同的输出结果:
   #+begin_src bash
     echo Welcome to Bash
   #+end_src

   #+RESULTS:
   : Welcome to Bash
   使用单引号也可以完成相同的任务:
   #+begin_src bash
     echo 'Welcome to Bash'
   #+end_src

   #+RESULTS:
   : Welcome to Bash
   这些方法看起来相似,但各有一些特殊用途和副作用.
   思考下面这行命令:
   #+begin_src bash
     echo "cannot include exclamation - ! within double quotes"
   #+end_src

   #+RESULTS:
   : cannot include exclamation - ! within double quotes
   这条命令将会返回:bash: !:event not found error.
   因此,如果你希望打印!,那就不要放入双引号内,或者你可以在其之前加上一个特殊的转义字符(\)将其转义.(这里能成功应该被emacs修改了)
   #+begin_src bash
     echo Hello World!
   #+end_src

   #+RESULTS:
   : Hello World!
   或
   #+begin_src bash
     echo 'Hello World!'
   #+end_src

   #+RESULTS:
   : Hello World!
   或者
   #+begin_src bash
     echo "Hello World \!"
   #+end_src

2. 每种方法的副作用如下:
   - 使用不带引号的echo时,你没法在所要显示的文本中使用,
     因为在bash shell中被用作命令定界符.

   - 以echo hello;hello为例,echo hello被视为一个命令,
     第二个hello则被视为另一个命令.

   - 使用带单引号的echo时,Bash不会对单引号中的变量(如$var)求值,
     而只是照原样显示

     这就意味着:$echo '$var'将会返回$var

3. 另一个用于终端打印的命令是printf
   #+begin_src bash
     printf "Hello world"
   #+end_src

   #+RESULTS:
   : Hello world
   printf并不会像echo命令一样,自动添加换行符,我们必须在需要的时候手动添加.
   比如在下面的脚本中:
   #+begin_src bash
    #!/bin/bash
    #文件名:printf.sh

    printf "%-5s %-10s %-4s\n" No Name Mark

    printf "%-5s %-10s %-4.2f\n" 1 Sarath 80.3456

    printf "%-5s %-10s %-4.2f\n" 2 James 90.9989

    printf "%-5s %-10s %-4.2f\n" 3 Jeff 77.564
   #+end_src

   #+RESULTS:
   | No | Name   |  Mark |
   |  1 | Sarath | 80.35 |
   |  2 | James  |  91.0 |
   |  3 | Jeff   | 77.56 |

   %s,%c,%d,%f都是格式替换符,其所对应的参数可以置于带引号的格式字符串之后.
   
**** 1.2.2补充内容
1. 在echo中转义换行符
   在默认情况下,echo会将衣蛾换行符最佳到输出文本的尾部.
   可以使用标志-n来忽略结尾的换行符.
2. echo同样接收双引号字符串内的转义序列作为参数.如果需要
   使用转义序列,则采用echo -e "包含转义序列的字符串"这种形式.
   例如:
   #+begin_src bash
     echo -e "1\t2\t3"
   #+end_src

   #+RESULTS:
   | 1 | 2 | 3 |

3. 打印彩色输出
   每种颜色都有自己的颜色码.比如:
   重置=0  黑色=30  红色=31  绿色=32  黄色=33
   蓝色=34  洋红=35  青色=36  白色=37
   #+begin_src bash
     echo -e "\e[1;31m This is red text\e[0m"
   #+end_src

   #+RESULTS:
   : \e[1;31m This is red text\e[0m

   \e[1;31将颜色设为红色,\e[0m将颜色重新置回.你只需要将31替换成
   想要的颜色码就可以了.

   要设置彩色背景,经常使用的颜色码是: 
   重置=0  黑色=40  红色=41  绿色=42  黄色=43
   蓝色=44  洋红=45  青色=46  白色=47

   要打印彩色文本需输入:
   #+begin_src bash
     echo -e "\e[1;42m Green Background \e[0m"
   #+end_src

   #+RESULTS:
   : \e[1;42m Green Background \e[0m


*** 1.3.玩转变量和环境变量
   1. 在Bash中,每一个变量的值都是字符串,无论你给变量赋值
      时有没有使用引号,值都会以字符串的形式存储.
   2. 有一些特殊的变量会被shell环境和操作系统环境用来存
      储一些特别的值,这类变量就被称为环境变量.
**** 1.3.1预备知识
   1. 当一个应用程序执行的时候,它接收一组环境变量.可以使
      用env命令在终端查看所有与此终端进程相关的环境变量.
   2. 对于每个进程,在其运行时的环境变量可以使用下面的命令
      来查看:
      #+begin_src 
	cat /proc/$PID/environ
      #+end_src
      其中,将PID设置成相关进程的ID.
   3. 假设有一个叫做emacs的应用程序正在运行.
      我们可以使用pgrep命令获得emacs的进程ID:
      #+begin_src bash
	pgrep emacs
      #+end_src

      #+RESULTS:
      : 1804
      那么,你就可以通过以下命令获得与该进程相关的环境变量:
      #+begin_src bash
	cat /proc/1804/environ
      #+end_src

      #+RESULTS:
      
      上面介绍的命令返回一个包含环境变量以及对应变量值的列表.
      每个变量以name=value的形式来描述,彼此之间由null字符(\0)
      分割.如果你讲\0替换成\n,那么就可以将输出重新格式化,是的每
      一行显示一堆variable=value.替换可以使用tr命令来实现:
      #+begin_src bash
	cat /proc/1804/environ | tr '\0' '\n'
      #+end_src

      #+RESULTS:

**** 1.3.2实战演练
   1. 一个变量可以通过一下方式进行赋值:
      var=value
      var是变量名,value是赋给变量的值.如果value不包含任何
      空白字符(例如空格),那么它不需要使用引号进行引用,反之
      则必须使用单引号或双引号.
      注意: var=value(赋值操作);而var = value(相等操作)
      等号两边不应该出现空格,如果是赋值操作的话.

   2. 在变量名之前加入$前缀就可以打印出变量的内容:
      #+begin_src bash
	var="value" #给变量var赋值
	echo $var
	#或者
	echo ${var}
      #+end_src

      #+RESULTS:
      | value |
      | value |
      
      我们可以在printf或echo命令的双引号引用变量值.
      #+begin_src bash
	#!/bin/bash
	#文件名:variables.sh
	fruit=apple
	count=5
	echo "We have $count ${fruit}(s)"
      #+end_src

      #+RESULTS:
      : We have 5 apple(s)

   3. 环境变量是未在当前进程中定义,而从父进程中继承而来
      的变量.export命令用来设置环境变量.至此之后,从当前
      shell脚本执行的任何程序都会继承这个变量.
      #+begin_src bash
	echo $PATH
      #+end_src

      #+RESULTS:
      : /usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/dream/bin

      如果需要再PATH中添加一条新的路径,可以使用:
      #+begin_src bash
	export PATH="$PATH:/home/user/bin"
      #+end_src
      这样,我们就将/home/user/bini添加到了PATH中.

**** 1.3.3补充内容
   1. 获得字符串长度:
      length=${#var}

      #+begin_src bash
	var=12345678901234567890
	echo ${#var}
      #+end_src

      #+RESULTS:
      : 20

   2. 识别当前的shell版本
      可以用下面的方法获知当前使用的是那种shell:
      #+begin_src bash
	echo $SHELL
	# 也可以用
	# 不知道为何两个命令结果不一样,本地用的是zsh
	#运行用的是bash
	echo $0
      #+end_src

      #+RESULTS:
      | /bin/zsh |
      | bash     |

   3. 检查是否为超级用户
     UID是一个重要的环境变量,可以用于检查当前脚本是以超级
     用户还是以普通用户的身份运行的.例如:
     #+begin_src bash
       if [ $UID -ne 0 ]; then
       echo Non root user.Please run as root.
       else
       echo "Root user"
       fi
     #+end_src 

     #+RESULTS:
     : Non root user.Please run as root.


*** 1.4.通过shell进行数学运算
**** 1.4.1预备知识
   1.在Bash shell环境中,可以利用let,(())和[]执行基本的算术操作.
   而在进行高级操作时,expr和bc两个工具也会非常有用.
**** 1.4.2实战演练
   1.可以用普通的变量赋值方法定义数值,这时,它会被存储为字符串.
   然而,我们可以用一些方法使它能像数字一样进行处理.
   #+begin_src bash
     #!/bin/bash
     no1=4;
     no2=5;
     # let命令可以直接执行基本的算术操作.
     # 当使用let时,变量名之前不需要再添加$
     let result=no1+no2
     echo $result
   #+end_src

   #+RESULTS:
   : 9
   #+begin_src bash
     #!/bin/bash
     no1=4;
     no2=5;
     result=$[no1+no2]
     echo $result
     result=$[$no1+5]
     echo $result
   #+end_src

   #+RESULTS:
   | 9 |
   | 9 |
   #+begin_src bash
     #!/bin/bash
     no1=4;
     no2=5;
     # 也可以使用(())
     result=$((no1+50))
     echo $result
   #+end_src

   #+RESULTS:
   : 54

   #+begin_src bash
     #!/bin/bash
     #expr同样可以用于基本算术操作
     no1=4;
     result=`expr 3+4`
     echo $result
     result=$(expr $no1+5)
     echo $result
   #+end_src

   #+RESULTS:
   | 3+4 |
   | 4+5 |

   #+begin_src bash
     echo "4*0.56"|bc

     no=54
     # 变量引用:$var,${var}
     # 命令引用: `command`,$(command)
     #result=`echo "$no*1.5" | bc`
     result=$(echo "$no*1.5" | bc)
     echo $result
   #+end_src

   #+RESULTS:
   | 2.24 |
   | 81.0 |

   设定小数精度
   #+begin_src bash
     # 设定小数精度范围
     echo "scale=2;3/8" | bc
   #+end_src

   #+RESULTS:
   : 0.37

   进制转换
   #+begin_src bash
     #!/bin/bash
     #用途:数字转换
     no=100
     echo "obase=2;$no" | bc

     no1=1100100
     echo "obase=10;ibase=2;$no1" | bc
   #+end_src

   #+RESULTS:
   | 1100100 |
   |     100 |

   计算平方以及平方根:
   #+begin_src bash
     #平方根
     echo "sqrt(100)" | bc
     #平方
     echo "10^10" | bc
   #+end_src

   #+RESULTS:
   |          10 |
   | 10000000000 |

   

*** 1.5.玩转文件描述符和重定向
    文件描述符是与文件输入,输出相关联的整数.最常见的文件
  描述符是stdin,stdout和stderr.
**** 1.5.1.预备知识
    文件描述符0,1,2是系统预留的.
  - 0-----stdin(标准输入)
  - 1-----stdout(标准输出)
  - 2-----stderr(标准错误)
**** 1.5.2.实战演练
    用下面的方法可以将输出文本重定向或保存到一个文件中:

    #+begin_src bash
      echo "This is a sample text 1" > temp.txt
    #+end_src

    #+RESULTS:

    这种方法会将文本追加到目标文件中

    #+begin_src bash
      # 这种方法会将文本追加到目标文件中
      echo "This is a sample text 2" >> temp.txt
    #+end_src

    #+RESULTS:

    用下面方法查看文件内容
    #+begin_src bash
      # 用下面方法查看文件内容
      cat temp.txt
    #+end_src

    #+RESULTS:
    | This | is | a | sample | text | 1 |
    | This | is | a | sample | text | 2 |

      当使用重定向操作符时,重定向的内容不会出现在终端,而是
    直接被导入文件.重定向操作符默认使用标准输出.如果想使用
    特定的文件描述符,你必须将描述符置于操作符之前.

      >等同于1>;对于>>来说,情况也类似(即>>等同于1>>).
    
      下面的命令会将stderr文本打印到屏幕上,而不是文件中.
      #+begin_src bash
	ls + > out.txt
      #+end_src

      然后在下面的命令中,stdout没有任何输出,因而会生成空
    文件outtxt.
    #+begin_src bash
      ls + 2>out.txt
    #+end_src

      你可以将stderr单独重定向到一个文件,将stdout重定向
    到另一个文件:
    #+begin_src bash
      cmd 2>stderr.txt 1>stdout.txt
    #+end_src

      还可以利用下面的方法将stderr转换成stdout,使得stderr
    和stdout都被重定向到同一个文件中:
    #+begin_src bash
      cmd 2>&1 output.txt
      # 或者采用下面的方法
      cmd &> output.txt
    #+end_src

      将stderr重定向到其他文件.
      #+begin_src bash
	#!/bin/bash
	# 查看以a起始的所有文件的内容

	# 设置一些测试文件
	echo a1 > a1
	cp a1 a2;cp a2 a3;
	# 清除所有权限
	chmod 000 a1
	# 尽管可以使用通配符(cat a*),查看所有文件内容,但
	# 系统会显示一个出错信息,因为对文件a1没有权限.

	# 将stderr重定向到err.txt
	cat a* 2>err.txt
      #+end_src

      将stderr重定向到黑洞
      #+begin_src bash
	some_command 2> /dev/null
      #+end_src

      在终端打印stdout,同时将它重定向到一个文件中,那么
    可以这样使用tee:
    #+begin_src bash
      command | tee FILE1 FILE2
    #+end_src

      将stdout的一份副本写入文件,同时另一份副本作为后续
    命令的stdin.
    #+begin_src bash
      cat a* | tee out.txt | cat -n
    #+end_src

    我们可以使用stdin作为命令参数.只需要将-作为命令的文
  件名参数即可(也可以用/dev/stdin作为输出文件名来使用stdin):
  #+begin_src bash
    # cmd1 | cmd2 | cmd -
    # 例如
    echo who is this | tee -
  #+end_src

  #+RESULTS:
  : who is this

      
  

**** 1.5.3.补充内容
- 1.将文件重定向到命令
  #+begin_src bash
    cmd < file
  #+end_src
- 2.重定向脚本内部的文本块
  #+begin_src bash
    #!/bin/bash

    cat<<EOF>log.txt
    LOG FILE HEADER
    This is a test log file
    Function:System statistics
    EOF
  #+end_src

  #+RESULTS:
- 3.自定义文件描述符
  文件打开模式:
  - 只读模式

  - 截断模式

  - 追加模式

    <操作符用于从文件中读取值stdin.
    >操作符用于截断模式的文件写入(数据在目标文件内容
    被截断之后写入)
    >>操作符用于追加模式的文件写入(数据被添加到文件的
    现有内容中,而且该目标文件中原有的内容不会丢失)


*** 1.6.数组和关联数组
**** 1.6.1.预备知识
    Bash同时支持普通数组和关联数组.普通数组只能使用整数
  作为数组索引,而关联数组可以使用字符串作为数组索引.
**** 1.6.2.实战演练
    定义数组:单行中使用一列值来定义一个数组.
    #+begin_src bash
      array_var=(1 2 3 4 5 6)
    #+end_src

    另外,还可以将数组定义成一组索引值-值.
    #+begin_src bash
      array_var[0]="test1"
      array_var[1]="test2"
      array_var[2]="test3"
      array_var[3]="test4"
      array_var[4]="test5"
      array_var[5]="test6"

      # 打印出特定索引的数组元素内容:
      echo ${array_var[0]}

      index=5
      echo ${array_var[$index]}

      # 以清单形式打印出数组中的所有值:
      echo ${array_var[*]}

      # 你也可以使用@
      echo ${array_var[@]}

      # 打印数组长度(即数组中元素的个数):
      echo ${#array_var[*]}

    #+end_src

    #+RESULTS:
    | test1 |       |       |       |       |       |
    | test6 |       |       |       |       |       |
    | test1 | test2 | test3 | test4 | test5 | test6 |
    | test1 | test2 | test3 | test4 | test5 | test6 |
    | 6     |       |       |       |       |       |

**** 1.6.3.补充内容
***** 1.定义关联数组
    声明一个变量名位关联数组.声明语句如下:
    #+begin_src bash
      declare -A ass_array
    #+end_src

    添加元素到关联数组
    - 1.利用内嵌索引-值列表法:
      #+begin_src bash
	ass_array=([index1]=val1 [index2]=val2)
      #+end_src
    - 2.使用独立的索引-值进行赋值:
      #+begin_src bash
	ass_array[index1]=val1
	ass_array[index2]=val2
      #+end_src

    举例:用关联数组为水果制定价格:
    #+begin_src bash
      declare -A fruit_value
      fruit_value=([apple]='100dollars' [orange]='150 dollars')
      # 用下面方法显示数组内容
      echo "Apple costs ${fruit_value[apple]}"
    #+end_src

    #+RESULTS:
    : Apple costs 100dollars

***** 2.列出数组索引
    获取索引的列表(对于普通数组,这个方法同样可行):
    #+begin_src bash
      echo ${!array_var[*]}
      # 也可以使用:
      echo ${!array_var[@]}
    #+end_src

    #+begin_src bash
      declare -A fruit_value
      fruit_value=([apple]='100dollars' [orange]='150 dollars')
      echo ${!fruit_value[*]}
    #+end_src

    #+RESULTS:
    : apple orange


*** 1.7.使用别名

*** 1.8.获取终端信息
**** 1.8.1 预备知识
    tput和stty是两款终端处理工具.
**** 1.8.2 实战演练
    获取终端的行数和列数:
    #+begin_src bash
      tput cols
      tput lines
    #+end_src

    #+RESULTS:
    | 80 |
    | 24 |

    打印当前终端名:
    #+begin_src bash
      tput longname
    #+end_src

    #+RESULTS:
    : 80-column dumb tty

    在输入密码的时候,不能让输入的内容显示出来.
    #+begin_src bash
      #!/bin/bash
      #Filename:password.sh


      echo -e "Enter password:"
      # -echo 禁止将输入发送到终端
      stty -echo
      read password
      # echo 允许发送输出
      stty echo
      echo
      echo Password read.
    #+end_src



*** 1.9.获取,设置日期和延时
**** 1.9.1.预备知识
    在类UNIX系统中,日期被存储为一个整数,其大小为自
  世界标准时间1970年1月1日0时0分0秒起所流逝的秒数.
  这种计时方式称之为纪元时或UNIX时间.
**** 1.9.2.实战演练
    读取日期
    #+begin_src bash
      date
    #+end_src

    打印纪元时:
    #+begin_src bash
      date +%s
    #+end_src

    将日期字符串转换成纪元时:
    #+begin_src bash
      # --date用于提供日期串作为输入.
      date --date "Thu Nov 18 08:07:21 IST 2010" +%s
    #+end_src

    将日期串作为输入能够用来获知给定的日期是星期几.
    #+begin_src bash
      date --date "Jan 20 2001" +%A
    #+end_src

    下面是日期格式字符串列表:

    |------------------------+--------------------|
    | 日期内容               | 格式               |
    |------------------------+--------------------|
    | 星期                   | %a(例如:Sat)       |
    |                        | %A(例如:Saturday)  |
    |------------------------+--------------------|
    | 月                     | %b(例如:Nov)       |
    |                        | %B(例如:November)  |
    |------------------------+--------------------|
    | 日                     | %d(例如:31)        |
    |------------------------+--------------------|
    | 固定格式日期(mm/dd/yy) | %D(例如:10/18/10)  |
    |------------------------+--------------------|
    | 年                     | %y(例如:10)        |
    |                        | %Y(例如:2010)      |
    |------------------------+--------------------|
    | 小时                   | %I或者%H(例如:08)  |
    |------------------------+--------------------|
    | 分钟                   | %M(例如:33)        |
    |------------------------+--------------------|
    | 秒                     | %s(例如:10)        |
    |------------------------+--------------------|
    | 纳秒                   | %N(例如:694049494) |
    |------------------------+--------------------|
    | UNIX纪元时(以秒为单位) | %s(例如:132342342) |
    |------------------------+--------------------|

    用格式串结合+作为date命令的参数,可以打印出对应
  格式的日期
  #+begin_src bash
    date "+%d%B%Y"
  #+end_src

    设置日期和时间:
    #+begin_src bash
      # date -s "格式化的日期字符串"
      date -s "21 June 2009 11:01:22"
    #+end_src

    有时候,我们需要检查一组命令所花费的时间,那就可以采用
  下面的方式:
  #+begin_src bash
    #!/bin/bash
    # 文件名: time_take.sh

    start=$(date +%N)
    #一些业务命令,这里用echo代替
    echo "hello world"
    end=$(date +%N)
    difference=$((end - start))
    echo Time taken to execute commands is ${difference} nanosecond.
  #+end_src

**** 1.9.3.补充内容
    脚本中生成延时
    #+begin_src bash
      #!/bin/bash
      # Filename:sleep.sh

      echo -n Count:
      tput sc

      count=0
      while true;
      do
      if[$count -lt 40];
      then let count++;
      sleep 1;
      tput rc
      tput ed
      echo -n $count;
      else exit 0;
      fi
      done
    #+end_src


*** 1.10.调试脚本
**** 1.10.1.预备知识
    调试shell脚本不需要什么特殊工具.Bash本身就包含了
  一些选项,能够打印出脚本接受的参数和输入.
**** 1.10.2.实战演练
    使用-x,启动跟踪调试shell脚本:
    #+begin_src bash
      bash -x script.sh
    #+end_src

    我们也可以要求只关注脚本某些部分的命令集参数的打印
  输出:
    - set -x:在执行时显示参数和命令
    - set +x:禁止调试
    - set -v:当命令进行读取时显示输入
    - set +v:禁止打印输入
      #+begin_src bash
	#!bin/bash
	#文件名:debug.sh

	for i in {1..6}
	do
	set -x
	echo $i
	set +x
	done
	echo "Script executed"
      #+end_src

**** 1.10.3.补充内容
    把shebang从#!/bin/bash改成#!/bin/bash -xv,
  这样一来,不用任何其他选项就可以启用调试功能了.
*** 1.11.函数和参数
**** 1.11.1.实战演练
    - 定义函数:
      # 方法一:
      function fname(){statements;}
      # 方法二:
      fname(){statements;}

    - 调用函数:
      # 执行函数
      fname;

    - 传递参数
      # 传递参数
      fname arg1 arg2;

    - 访问函数参数
      fname()
      {
      # 访问参数1和参数2
      echo $1,$2;
      # 以列表的方式一次性打印所有参数
      echo "$@";
      # 类似于$@,但是参数被作为单个实体
      echo "$*";
      # 返回值
      return 0;
      }

      类似的,参数可以传递给脚本并通过script:$0 (脚本名)
    访问
      - $1是第一个参数
      - $2是第二个参数
      - $n是第n个参数
      - "$@"被扩展成"$1","$2","$3"等.
      - "$*"被扩展成"$1c$2c$3",其中c是
	IFS(字段分隔符)的第一个字符.
      - "$@"用的最多.由于"$*"将所有的参数当做单个字符串,
	因此它很少被使用.
*** 1.12.读取命令序列输出
**** 1.12.1预备知识
cmd1|cmd2|cmd3
**** 1.12.2实战演练
    #+begin_src bash
    ls | cat -n > out.txt
    #+end_src

    1. 我们可以用下面的方法读取命令序列的输出
    cmd_out=$(COMMANDS)
    这种方法也被称为子shell(subshell),例如:
    #+begin_src bash
      cmd_output=$(ls | cat -n)
      echo $cmd_output
    #+end_src

    2. 另一种方法被称为反引用(back-quote)的方法
  也可以用于存储命令输出:
    cmd_out=`COMMANDS`
    例如:
    #+begin_src bash
      cmd_output=`ls | cat -n`
      echo $cmd_output
    #+end_src

**** 补充内容
    有很多方法可以给命令分组.我们来看看其中几种.
    1. 利用子shell生成一个独立的进程

       子shell本身就是独立的进程.可以使用()操作符来定义
       一个子shell.
       #+begin_src bash
	 pwd;
	 (cd /bin;ls);
	 pwd;
       #+end_src
       当命令在子shell中执行,不会对当前shell有任何影响;
       所有的改变权限仅限于子sheel内.
    2. 通过引用子shell的方式保留空格和换行符(这个可能
       有点老了,试过操作与书本不符)

       加入我们使用子shell或反引用的方法将命令的输出读入
       一个变量中,可以将它放入双引号中,以保留空格和换行
       符(\n).例如:
       #+begin_src bash
	 cat text.txt
       #+end_src

       #+RESULTS:
       | 1 |
       | 2 |
       | 3 |

       #+begin_src bash
	 out=$(cat text.txt)
	 #丢失了换行符\n
	 echo $out
       #+end_src

       #+RESULTS:
       : 1 2 3

       #+begin_src bash
	 out="$(cat text.txt)"
	 echo $out
       #+end_src

       #+RESULTS:
       : 1 2 3

       


*** 1.13.以不按回车键的方式读取"n"
    read是一个重要的Bash命令,用于从键盘或标准输入中读取
  文本.
**** 1.13.1.预备知识
    read命令提供了一种不需要按回车键就能够确认输入完毕的
  方法.
**** 1.13.2.实战演练
    下面的语句从输入中读取n个字符并存入变量variable_name
    #+begin_src bash
      # read -n number_of_chars varible_name
      # 读取2个字符存入变量
      read -n 2 var
      echo $var
    #+end_src

    #+begin_src bash
      # 用不回显的方式读取密码
      read -s var
      # 输出提示语句
      read -p "Enter input:" var
      # 在特定时限内读取输入:
      # read -t timeout var
      # 在2秒钟内将键入的字符串读入变量var
      read -t 2 var
      # 用界定符结束输入行:
      # read -d delim_charvar
      read -d ":" var
    #+end_src


*** 1.14.字段分隔符和迭代器
    IFS(内部字段分隔符)是shell脚本中的一个重要概念.
**** 1.14.1.预备知识
#+begin_src bash
  data="name,sex,rollno,location"
  oldIFS=$IFS
  IFS=,
  for item in $data;
  do
  echo Item: $item
  done
  IFS=$oldIFS
#+end_src

**** 1.14.2.实站演练
见IFS.sh

*** 1.15.比较与测试
    程序中的流程控制是由比较和测试语句来处理的.
**** 1.15.1.预备知识
    我们可以用if,if else以及逻辑运算符来执行测试,
  而用一些比较运算符来比较数据项.另外,有一个test
  命令也可以用来进行测试.
**** 1.15.2.实战演练
    &&逻辑与运算符,||逻辑或运算符
    现在了解下条件和比较操作.
    - 算术比较
      条件通常被放置在封闭的中括号内.
      注意:一定要注意在||与操作数之间有一个空格.如果忘了
      这个空格,会报错.
      #+begin_src bash
	[$var -eq 0] or [$var -eq 0]
      #+end_src
    - 对变量或值进行算术条件判断:
      #+begin_src bash
	# 当$var等于0时,返回真
	[$var -eq 0]
	# 当$var为非0时,返回真
	[$var -ne 0]
      #+end_src

      其它重要操作符如下所示.
      - -gt: 大于

      - -lt: 小于

      - -ge: 大于或等于

      - -le: 小于或等于

      可以按照下面的方法结合多个条件进行测试:
      #+begin_src bash
	# 使用逻辑与-a
	[$var1 -ne 0 -a $var2 -gt 2]
	# 使用逻辑或-o
	[$var -ne 0 -o $var2 -gt 2]
      #+end_src
    - 文件系统相关测试
      我们可以使用不同的条件标志测试不同的文件系统
      相关属性.
      - [-f $file_var]: 如果给定的变量包含正常的文
	件路径或文件名,则返回真

      - [-x $var]: 如果给定的变量包含的文件可执行,
	则返回真

      - [-d $var]: 如果给定的变量包含的是目录,则返
	回真.

      - [-e $var]: 如果给定的变量包含的文件存在,则返回真.

      - [-c $var]: 如果给定的变量包含的是一个字符设备文件
	的路径,则返回真.

      - [-b $var]: 如果给定的变量包含的是一个块设备文件的
	路径,则返回真

      - [-w $var]: 如果给定的变量包含的文件可写,则返回真.

      - [-r $var]: 如果给定的变量包含的文件可读,则返回真.

      - [-L $var]: 如果给定的变量包含的是一个符号链接,则
	返回真.

	使用方法如下:
	#+begin_src bash
	fpath="/etc/passwd"
	if [ -e $fpath ];then
	echo File exists;
	else
	echo Does not exist;
	fi
	#+end_src
    - 字符串比较
       使用字符串比较时,最好使用双中括号,因为有时候采用单个
       中括号会产生错误,所以最好避免它们.
       #+begin_src bash
	 str1="hello"
	 str2=$str1
	 # 当str1等于str2时,返回真.也就是说,
	 # str1和str2包含的文本是一模一样的.
	 #[[ $str1 = $str2]]
	 if [[ $str1 = $str2 ]];
	 then echo "str1等于str2";
	 else echo "str1不等于str2";
	 fi

	 # 这是检查字符串是否相等的另一种写法,也可以检查两个
	 # 字符串是否不同.
	 #[[ $str1 == $str2 ]]
	 if [[ $str1 == $str2 ]];
	 then echo "str1等于str2";
	 else echo "str1不等于str2";
	 fi

	 # 如果str1和str2不相同,则返回真.
	 #[[ $str1 != $str2]]
	 if [[ $str1 != $str2 ]];
	 then echo "str1不等于str2";
	 else echo "str1等于str2";
	 fi

	 # 我们还可以检查字符串的子母序情况

	 str1="hello"
	 str2="world"
	 # 如果str1的子母序比str2大,则返回真.
	 #[[ $str1 > $str2 ]]
	 if [[ $str1 > $str2 ]];
	 then echo "str1的子母序比str2大";
	 else echo "str1的子母序比str2小";
	 fi

	 # 如果str1的子母序比str2小,则返回真.
	 #[[ $str1 < $str2 ]]
	 if [[ $str1 < $str2 ]];
	 then echo "str1的子母序比str2小";
	 else echo "str1的子母序比str2大";
	 fi

	 str1="";
	 # 如果str1包含的是空字符串,则返回真.
	 #[[ -z $str1  ]]
	 if [[ -z $str1 ]];
	 then echo "str1是空字符串";
	 else echo "str1的值为$str1";
	 fi

	 # 如果str1包含的是非空字符串,则返回真.
	 #[[ -n $str1  ]]
	 if [[ -n $str1 ]];
	 then echo "str1是非空字符串";
	 else echo "str1是空字符串";
	 fi
       #+end_src

    使用逻辑运算符 && 和||能够很容易将多个条件组合起来:
    #+begin_src bash
      # if [[ -n $str1 ]] && [[ -z $str2 ]];
      # then commands
      # 例如:
      str1="Not empty"
      str2=""

      if [[ -n $str1 ]] && [[ -z $str2 ]];
      then
      echo str1 is not-empty and str2 is empty string.
      fi
    #+end_src

    test命令可以用来执行条件检测.
    #+begin_src bash
      var=1
      if [[ $var -eq 0 ]];
      then echo "True";
      else echo "False";
      fi

      if test $var -eq 0;
      then echo "True";
      else echo "False";
      fi
    #+end_src

    #+RESULTS:
    | False |
    | False |





