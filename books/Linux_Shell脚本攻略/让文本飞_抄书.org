#+startup: overview
#+title: Linux_Shell脚本攻略
#+author: dream

* 第四章:让文本飞
** 4.1 简介
** 4.2 正则表达式入门
    正则表达式是基于样式匹配的文本处理技术的关键所在.
*** 4.2.1 预备知识
   正则表达式是用于绝大多数文本处理工具的一种语言.
*** 4.2.2 实战演练
    本节将会让你简单了解一下正则表达式,POSIX字符类以及元字符.
    先来看一看正则表达式的基本组成部分,如下所示:
|--------+------------------+---------------------|
| 正则   | 描述             | 示例                |
| 表达式 |                  |                     |
|--------+------------------+---------------------|
| \^     | 起始行标记       | ^tux匹配以          |
|        |                  | tux起始的行         |
|--------+------------------+---------------------|
| \$     | 行尾标记         | tux$匹配以$         |
|        |                  | tux结尾的行         |
|--------+------------------+---------------------|
|        |                  | Hack.匹配Hackl和    |
| .      | 匹配任           | Hacki,但是不能匹配  |
|        | 意一个字符       | Hackl2和Hackil,它   |
|        |                  | 只能匹配单个字符    |
|--------+------------------+---------------------|
| []     | 匹配包含在[字符] | coo[k]匹配          |
|        | 之中的           | cook或cool          |
|        | 任意一个字符     |                     |
|--------+------------------+---------------------|
| [^]    | 匹配除[^字符]     | 9[^01]匹配92         |
|        | 之外的任意字符   | ,93,但是不匹        |
|        |                  | 配91或90            |
|--------+------------------+---------------------|
| [-]    | 匹配[]中         | [1-5]匹配从         |
|        | 指定范围内的     | 1~5的任意一个       |
|        | 任意一个字符     | 数字                |
|--------+------------------+---------------------|
| ?      | 匹配之前的       | colou?r匹配         |
|        | 项1次或0次       | color或colour,但是  |
|        |                  | 不能匹配colouur     |
|--------+------------------+---------------------|
| +      | 匹配之前         | Rollno-9+匹配       |
|        | 的项1次或多次    | Rollno-99,Rollno-9, |
|        |                  | 但是不能匹配        |
|        |                  | Rollno-             |
|--------+------------------+---------------------|
| \*     | 匹配之前的项     | co*l匹配cl,col,     |
|        | 0次或多次        | coool等             |
|--------+------------------+---------------------|
| ()     | 创建一个用       | max(tri)?匹配max    |
|        | 于匹配的子串     | 或maxtrix           |
|--------+------------------+---------------------|
| \vert      | 交替--匹配\vert      | Oct (1st \vert 2nd)匹配 |
|        | 两边的任意一项   | Oct 1st或Oct 2nd    |
|--------+------------------+---------------------|
| \      | 转义符可以将     | a\.b匹配a.b,但      |
|        | 上面介绍的特殊   | 不匹配ajb.通过在.   |
|        | 字符进行转义     | 之前加上前缀\,从而  |
|        |                  | 忽略了.的特殊意义   |
|--------+------------------+---------------------|

    POSIX字符类是一个形如[:...:]的特殊原序列,它可以
    用于匹配特定的字符范围.
    POSIX字符类如下所示:
|------------+------------------+-----------------|
| 正则表达式 | 描述             | 示例            |
|------------+------------------+-----------------|
| [:alnum:]  | 字母及数字字符   | [[[[:alnum:]]]]+    |
|------------+------------------+-----------------|
| [:alpha:]  | 字母字符(包括    |                 |
|            | 大写字母和小写   | [[[[:alpha:]]]](4)  |
|------------+------------------+-----------------|
| [:blank:]  | 空格和制表符     | [[[[:blank:]]]]*    |
|------------+------------------+-----------------|
| [:digit:]  | 数字字符         | [[[[:digit:]]]]?    |
|------------+------------------+-----------------|
| [:lower:]  | 小写字母         | [[[[:lower:]]]]{5,} |
|------------+------------------+-----------------|
| [:upper]   | 大写字母         | ([[[[:upper:]]]]+)? |
|------------+------------------+-----------------|
| [:punct:]  | 标点符号         | [[[[:punct:]]]]     |
|------------+------------------+-----------------|
| [:space]   | 包括换行符,回车  |                 |
|            | 等在内的所有空白 | [[[[:space:]]]]+    |
|            | 符号             |                 |
|------------+------------------+-----------------|

    元字符是一种Perl风格的正则表达式,只有一部分文本
    处理工具支持它.
*** 4.2.3 工作原理
    - 匹配给定文本中的所有单词:
      (?[a-zA-Z]+?)
      注意: ?用于匹配单词前后可能出现的空格
    - 匹配一个IP地址:
      [0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}
      或者
      [[[[:digit:]]]]{1,3}\.[[[[:digit:]]]]{1,3}\.[[[[:digit:]]]]
      {1,3}\.[[[[:digit:]]]]{1,3}
*** 4.2.4 补充内容
** 4.3 用grep在文件中搜索文本
*** 4.3.1 预备知识
        grep命令是UNIX中用于文本搜索的大师级工具.它能够
    接受正则表达式和通配符.
*** 4.3.2 实战演练
    在文件中搜索一个单词:
    #+begin_src bash
      grep match_pattern filename
      # 或者
      grep "match_pattern" filename
    #+end_src

    也可以像下面这样从stdin中读取:
    #+begin_src bash
      echo -e "this is a word\nnext line" | grep word
    #+end_src

    一个grep命令也可以对多个文件进行搜索:
    #+begin_src bash
      grep "match_text" file1 file2 file3 ...
    #+end_src

    用--color选项可以在输出行中重点标记处匹配到的单词:
    #+begin_src bash
      grep word filename --color=auto
    #+end_src
    
    grep命令通常将match_pattern视为通配符.如果要使用正
    则表达式,则需要添加-E选项--这意味着使用扩展(extended)
    正则表达式,也可以使用默认允许正则表达式的grep命令--
    egrep.例如:
    #+begin_src bash
      grep -E "[a-z]+"
      # 或者
      egrep "[a-z]+"
    #+end_src

    为了只输出文件中匹配到的文本部分,可以使用选项-o:
    #+begin_src bash
      echo this is a line. | grep -o -E "[a-z]+\."
      # 或者
      # echo this is a line. | egrep -o "[a-z]+\."
    #+end_src

    要想打印除包含match__pattern的行之外的所有行,可使用:
    #+begin_src bash
      # 选项-v可以将匹配结果进行反转(invert)
      grep -v match_pattern file
    #+end_src

    统计文件或文本中包含匹配字符串的行数:
    #+begin_src bash
      grep -c "text" filename
    #+end_src

    注意:-c知识统计匹配行的数量,并不是匹配的次数.
    #+begin_src bash
      # 尽管有6个匹配项,但命令只打印2,这是因为只有
      # 2哥匹配行
      echo -e "1 2 3 4\nhello\n5 6" | grep -Ec "[0-9]"
    #+end_src

    为了文件中统计匹配项的数量,可以使用下面的技巧:
    #+begin_src bash
      echo -e "1 2 3 4\nhello\n5 6" | grep -Eo "[0-9]"\
      | wc -l
    #+end_src

    打印出包含匹配字符串的行数:
    #+begin_src bash
      grep linux -n sample1.txt
      # 或者
      cat sample1.txt | grep linux -n
    #+end_src

    如果使用多个文件,它也会随着输出结果打印出文件名:
    #+begin_src bash
      grep linux -n sample1.txt sample2.txt
    #+end_src

    打印样式匹配所位于的字符或字节偏移:
    #+begin_src bash
      echo gnu is not unix | grep -b -o "not"
    #+end_src

    搜索多个文件并找出匹配文本位于哪一个文件中:
    #+begin_src bash
      grep -l linux sample1.txt sample2.txt
    #+end_src

    和-l相反的选项是-L,它会返回一个不匹配的文件列表.

*** 4.3.3 补充内容
    1. 递归搜索文件
       #+begin_src bash
	 grep "text" . -R -n
       #+end_src

    2. 忽略样式中的大小写
       选项-i可以使匹配样式不考虑字符的大小写,例如:
       #+begin_src bash
	 echo hello world | grep -i "HELLO"
       #+end_src

    3. 用grep匹配多个样式
       在进行匹配的时候通常只指定一个样式.然而,我们
       可以用选项-e来指定多个匹配样式:
       #+begin_src bash
	 grep -e "pattern1" -e "pattern"
       #+end_src

       例如:
       #+begin_src bash
	 echo this is a line of text | grep -e "this"\
	  -e "line" -o
       #+end_src

       还有另一种方法也可以指定多个样式.我们可以提供一个
       样式文件用于读取样式.在样式文件中逐行写下需要匹配
       样式,然后用选项-f选项执行grep:
       #+begin_src bash
	 grep -f pattern_file source_filename
       #+end_src

       #+begin_src bash
	 echo hello this is cool | grep -f pat_file
       #+end_src

    4. 在grep搜索中包括或排除文件
       在目录中递归搜索所有的.c和.cpp文件
       #+begin_src bash
	 grep "main()" . -r --include *.{c,cpp}
       #+end_src

       在搜索中排除所有的README文件:
       #+begin_src bash
	 grep "main()" . -r --exclude "README"
       #+end_src

       如果需要排除目录,可以使用--exclude-dir选项.
       如果需要从文件中读取所需排除的文件列表,使用
       --exclude-from FILE.

    5. 使用0值字节后缀的grep与xargs
       grep 输出以0值字节作为终结符的文件名(\0).这可以用grep的
       -Z选项来指定.
       #+begin_src bash
	 grep "test" file* -lZ | xargs -0 rm
       #+end_src

    6. grep的静默输出

    7. 打印出匹配文本之前或之后的行

       打印匹配某个结果之后的三行,使用-A选项:
       #+begin_src bash
	 seq 10 | grep 5 -A 3
       #+end_src

       打印匹配某个结果之前的三行,使用-B选项:
       #+begin_src bash
	 seq 10 | grep 5 -B 3
       #+end_src

       打印匹配某个结果之前及之后的3行,使用-C选项:
       #+begin_src bash
	 seq 10 | grep 5 -C 3
       #+end_src

       如果有多个匹配,那么以一行"--"作为各匹配之间的定界符:
       #+begin_src bash
	 echo -e "a\nb\nc\na\nb\nc" | grep a -A 1
       #+end_src

       #+RESULTS:
       | a  |
       | b  |
       | -- |
       | a  |
       | b  |

** 4.4 用cut按列切分文件
    我们也许不需要按行,而是需要按列切分文件.
*** 4.4.1 预备知识
    cut是一个帮我们将文本按列进行切分的小工具.它也可以指定
    分隔每列的定界符
*** 4.4.2 实战演练
    为了提取第一个字段或列,可以使用下面的语法:
    cut -f FILE_LIST filename
    FIELD_LIST是需要显示的列.它由列号组成,彼此之间用逗号分隔.例如:
    cut -f 2,3 filename

    cut也能够从stdin中读取输入文本.
    制表符是字段或列的默认定界符.

    #+begin_src bash
      cut -f1 student_data.txt
    #+end_src

    要打印多列,需要提供一个由逗号分隔的列号列表作为-f选项的参数
    #+begin_src bash
      cut -f2,4 student_data.txt
    #+end_src

    我们也可以用--complement选项对提取的字段进行补集运算.
    打印出除第三列之外的所有的列,则可以使用:
    #+begin_src bash
      cut -f3 --complement student_data.txt
    #+end_src

    要制定字段的定界符,使用-d选项:
    #+begin_src bash
      cut -f2 -d";" delimited_data.txt
    #+end_src

*** 4.4.3 补充内容 
    cut命令有一些选项可以将一串字符作为列来显示.
    | 记法 | 范围                       |
    |-----+---------------------------|
    | N-  | 从第N个字节,字符或字段都行尾   |
    |-----+---------------------------|
    | N-M | 从第N个字节,字符或字段到第M个  |
    |     | (包括第M个在内)字节,字符或字段 |
    |-----+---------------------------|
    | -M  | 第1个字节,字符或字段到第M个    |
    |     | (包括第M个在内)字节,字符或字段 |
    |-----+---------------------------|

    用上面介绍的记法,再结合下列选项将某个范围的字节或字符指定为字段:
    * -b 表示字节;
    * -c 表示字符
    * -f 表示定义字段

    打印第一个到第五个字符:
    #+begin_src bash
      cut -c1-5 range_fields.txt
    #+end_src

    打印前2个字符:
    #+begin_src bash
      cut -c-2 range_fields.txt
    #+end_src

    在使用-c,-f和-b时,我们可以指定输出定界符:
    --output-delimiter "delimiter string"

    #+begin_src bash
      cut range_fields.txt -c1-3,6-9 --output-delimiter ","
    #+end_src

** 4.5 统计特定文件中的词频
    查找文件中使用单词的频率是一个很有意思的练习.
*** 4.5.1 预备知识
    我们可以使用关联数组,awk,sed,grep等不同的方式来解决这个问题
*** 4.5.2 实战演练
    见脚本word_freq.sh
** 4.6 sed入门
sed是stream editor(流编辑器)的缩写.sed命令众所周知的一个用法
是进行文本替换.
*** 4.6.1 实战演练
sed可以替换给定文本中的字符串.

sed 's/pattern/replace_string/' file
或者
cat file | sed 's/pattern/replace_string/'
这个命令从stdin中读取输入.

使用-i选项,可以将替换结果应用于原文件.很多用户在进行替换之后,借助
重定向来保存文件:

sed 's/text/replace/' file > newfile
mv newfile file

其实只需要一行命令就可以搞定,例如:

sed -i 's/text/replace/' file

如果要替换所有的内容,我们需要在命令尾部加上参数g,其方法如下:

sed 's/pattern/replace_string/g' file

#+begin_src bash
  echo this thisthisthis | sed 's/this/THIS/g'
#+end_src

字符/在sed中作为定界符使用.我们可以像下面一样使用任意的定界符:

sed 's:text:replace:g'
sed 's|text|replace|g'

当定界符出现在样式内部时,我们必须用前缀\对它进行转义:

sed 's|te\|xt|replace|g'

*** 4.6.2 补充内容
1) 移出空白行
   空白行可以用正则表达式^$进行匹配:
     sed '/^$/d' file
2) 已匹配字符串标记&
   在sed中,用&标记匹配样式的字符串,就能够在替换字符串时使用已匹配的
   内容.例如:
   #+begin_src bash
     echo this is an example | sed 's/\w\+/[&]/g'
   #+end_src
3) 子串匹配标记\1
   #+begin_src bash
     echo this is digit 7 in a number | \
     sed 's/digit \([0-9]\)/\1/'
   #+end_src

   这条命令将digit 7替换为7.样式中匹配到的子串是7.\(pattern\)用于匹配
   子串.模式被包括在使用斜线转义过的()中.对于匹配到的第一个子串,其对应的
   标记是\1,匹配到的第二个子串是\2,以此类推.下面的实力中包含了多个匹配:
   #+begin_src bash
     echo seven EIGHT | sed 's/\([a-z]\+\) \([A-Z]\+\)/\2 \1/'
   #+end_src

4) 组合多个表达式
   利用管道组合多个sed命令的方法可以用下面的方式替代

   sed 'exprression' | sed 'expression'

   它等价于

   sed 'expression; expression'

5) 引用
   sed表达式通常用单引号来引用.不过也可以使用双引号.双引号会通过对表达式
   求值来对其进行扩展.当我们想在sed表达式中使用一些变量字符串时,双引号就
   有用武之地了.例如:
   #+begin_src bash
     text=hello
     echo hello world |sed "s/$text/HELLO/"
   #+end_src

** 4.7 awk入门
*** 4.7.1 实战演练
awk脚本的结构基本如下所示:
awk 'BEGIN{print "start"} pattern { commands }' \
END{print "end"} file
*** 4.7.2 工作原理
awk命令的工作方式如下所示.
1. 执行BEGIN{commands}语句块中的语句.
2. 从文件或stdin中读取一行,然后执行pattern{commands}.重复
   这个过程,直到文件全部被读取完毕.
3. 当读至输入流(input stream)末尾时,执行pattern{commands}语句块.
   让我们看看下面的例子:
   #+begin_src bash
     echo -e "line1\nline2" | awk 'BEGIN{print "Start"} \
     {print} END{print "END"}'
   #+end_src

   当使用不带参数的print时,它会打印出当前行.关于print,需要记住两件
   重要的事情:当print的参数是以逗号进行分隔时,参数打印时则以空格作为
   定界符;在awk的print语句中,双引号是被当做拼接操作符(concaternation
    operator)使用的.例如:
    #+begin_src bash
      echo | awk '{ var1="v1"; var2="v2"; var3="v3"; \
      print var1,var2,var3;}'
    #+end_src

    拼接的使用方法如下:
    #+begin_src bash
      echo | awk '{ var1="v1"; var2="v2"; var3="v3"; \
      print var1"-"var2"-"var3; }'
    #+end_src

*** 4.7.3 补充内容
1. 特殊变量

    以下是可以用于awk的一些特殊变量。

    * NR：表示记录数量（number of records），在执行过程中对应于当前行号。

    * NF：表示字段数量（number of fields），在执行过程中对应于当前行的字段数。

    * $0：这个变量包含执行过程中当前行的文本内容。

    * $1：这个变量包含第一个字段的文本内容。

    * $2：这个变量包含第二个字段的文本内容。

    打印每一行的第2和第3个字段：
	awk '{ print $3,$2 }' file

    要统计文件中的行数，使用下面的命令：
	awk 'END{ print NR }' file
   
2. 将外部变量值传递给awk

    借助选项 -v，我们可以将外部值（并非来自stdin）传递给awk：

	#+begin_src 
	    $ VAR=10000
	    $ echo | awk -v VARIABLE=$VAR'{ print VARIABLE }'
	#+end_src


    还有另一种灵活的方法可以将多个外部变量传递给awk，例如：
	#+begin_src 
	    var1="Variable1" ; var2="Variable2";
	    echo | awk '{ print v1,v2 }' v1=$var1 v2=$var2
	#+end_src


    当输入来自于文件而非标准输入时，使用：
	awk '{ print v1,v2 }' v1=$var1 v2=$var2 filename

    在上面的方法中，变量之间用空格分隔，以键-值对的形式（v1=$var1 v2=$var2）作为awk的命名行参数紧随在BEGIN、{}和END语句块之后。

 
3. 用getline读取行

    通常，grep默认读取一个文件的所有行。如果只想读取某一行，可以使用getline函数。有时候，我们需要从BEGIN语句块中读取第一行。

    语法：getline var

    变量var就包含了特定行的内容。

    如果调用不带参数的getline，我们可以用 $0、$1和$2访问文本行的内容。

    例如：
	seq 5 | awk 'BEGIN { getline; print "Read ahead first line", $0 } { print $0 }'

    
4. 用样式对awk处理的行进行过滤

    我们可以为需要处理的行指定一些条件，例如：

	awk 'NR < 5' # 行号小于5的行
	awk 'NR==1,NR==4' #行号在1到5之间的行
	awk '/linux/' # 包含样式linux的行（可以用正则表达式来指定样式）
	awk '!/linux/' # 不包含包含样式linux的行

    
1. 设置字段定界符

    默认的字段定界符是空格。我们也可以用 -F "delimiter"明确指定一个定界符：

	awk -F: '{ print $NF }' /etc/passwd
    或者
	awk 'BEGIN { FS=":" } { print $NF }' /etc/passwd

	在BEGIN语句块中则可以用OFS="delimiter"设置输出字段的定界符.

2. 从awk中读取命令输出
    在下列的代码中,echo会生成一个空白行.变量cmdout包含命令grep
    root /etc/passwd的输出,然后打印包含root的行:
    将command的输出读取变量output的语法如下:
    "command" | getline output;

    例如:
    #+begin_src bash
	echo | awk '{"grep root /etc/passwd" | getline cmdout ;
    print cmdout}'
    #+end_src

    通过使用getline,能够将外部shell命令的输出读入变量cmdout.

    awk支持以文本作为索引的关联数组.

3. 在awk中使用循环
   在awk中可以使用for循环,其格式如下:
   for(i=0;i<10;i++){ print $i ; }
   或者
   for(i in array) { print array[i]; }

   awk有很多内建的字符串控制函数,让我们认识一下其中的部分函数.

   * length(string): 返回字符串的长度

   * index(string, search_string): 返回search_string在字符串
     中出现的位置.

   * split(string,array, delimiter): 用定界符生成一个字符串列
     表,并将该列表存入数组.

   * substr(string, strart-position, end-position): 在字符串
     中用字符起止偏移量生成子串,并返回该子串.

   * sub(regex, replacement_str, string): 将正则表达式匹配到的
     第一处内容替换成replacement_str.

   * gsub(regex, replacement_str, string): 和sub()类似,不过
     该函数会替换正则表达式匹配到的所有内容.

   * match(regex, string): 检查正则表达式是否能够匹配字符串.如
     果能够匹配,返回非0值;否则,返回0.match()有两个相关的特殊变量,
     分别是RSTART和RLENGTH.变量RSTART包含正则表达式所匹配的内容
     的起始位置,而变量RLENGTH包含正则表达式所匹配内容的长度.

** 4.8 替换文本或文件中的字符串
字符串替换是常见的文本处理任务.通过利用正则表达式所匹配所需要的文本
,就可以很轻松完成该任务.
*** 4.8.1 预备知识
一听到"替换"这个词,所有系统管理员大概都会想到sed.sed是类UNIX系统
下用于文本或文件内容替换的通用工具.让我们看看如何使用sed.
*** 4.8.2 实战演练
在4.6节中已经介绍了sed的大多数用法.你可以利用下面的方式替换一个字符
串或样式
#+begin_src bash
  sed 's/PATTERN/replace_text/g' filename
#+end_src
或者
#+begin_src bash
  stdin | sed 's/PATTERN/replace_text/g'
#+end_src
也可以用双引号(")代替单引号(').当使用双引号时,我们可以在sed
样式和替换字符串中指定变量.例如:
#+begin_src bash
  p=pattern
  r=replaced
  echo "line containing a pattern" | sed "s/$p/$r/g"
#+end_src

在sed中,我们也可以不使用g.
#+begin_src bash
  sed 's/PATTERN/replace_text/' filename
#+end_src

这条命令会替换PATTERN匹配的第一处内容./g意为全局(global),这就是
意味着它会替换文件中所有匹配PATTERN的内容

*** 4.8.3 补充内容
我们已经看过了用sed进行文本替换的基本用法.接下来看一看如何将替换
过的文本保存到原文件中.

将替换结果保存到文件中

当文件名传递给sed时,sed会将输出写入stdout.如果不想将输出传送
至stdout,而是将更改保存到文件中,那么可以使用-i选项:
#+begin_src bash
  sed 's/PATTERN/replacement/' -i filename
#+end_src

例如,用另一个指定的数字替换文件中所有的3位数字:
#+begin_src bash
  cat sed_data.txt | sed 's/\b[0-9]\{3\}\b/NUMBER/g'
#+end_src

#+RESULTS:
: abc 111 this 9 file contains 111 11 88 numbers 0000

下面代码中\b匹配不到字符.
#+begin_src bash
  cat sed_data.txt | sed 's/\b[0-9]\{3\}\b/NUMBER/g'
#+end_src

上面的单行命令只替换3位数字.\b[0-9]\{3\}\b是一个用于匹配3位数
字的正则表达式.[0-9]表示从0到9的数字范围.{3}用来匹配3次之前的数字.
\{3\}中的\用于赋予{和}特殊的含义.\b是单词边界标记.

** 4.9 压缩或解压缩JavaScript
Javascript广泛 用于网站设计.在编写Javascript代码时,处于代码可读性
与方便维护方面的考虑,我们有必要使用一些空格,注释和制表符.但是大量的空
格以及制表符会增加JavaScript文件的大小.随着文件体积的增加,网页载入
的时间也随之延长.因此,多数展业网站为了加快页面载入,都会对Javascript
文件进行压缩.通过压缩可以大幅度降低空白字符和换行符的数量.经过压缩的
Javascript,还可以通过加入足够的空白字符和换行符进行解压缩,这样就能够
恢复代码的可读性.这则攻略就尝试在shell中发掘出类似的功能.

*** 4.9.1 预备知识
我们准备写一个Javascript压缩工具或代码混乱器,当然,还包括与之对应
的解压缩工具.我们打算用文本与字符替换工具以及sed来试一试.下面来看看
具体的做法.

*** 4.9.2 工作原理
首先梳理一下对JavaScript进行压缩与解压缩的处理逻辑以及代码
#+begin_src bash
  cat sample.js
#+end_src

#+RESULTS:
| functionsign_out(){             |                     |
| $("#loading").show();           |                     |
| $.get("log_in",{logout:"True"}, |                     |
|                                 | function(){         |
|                                 | window.location=""; |
|                                 | });                 |
| }                               |                     |

下面列出了为压缩Javascript所需完成的工作.
1. 移除换行符和制表符.
2. 压缩空格
3. 替换注释/*内容*/.
4. 替换下列内容:
   - "{ "替换为"{"
   - " }"替换为"}"
   - " ("替换为"("
   - ") "替换为")"
   - ", "替换为","
   - " ; "替换为";"(我们需要移除所有多余的空格)

要解压缩或者恢复JavaScript的可读性,我们需要执行下面的任务:
1. 用";\n"替换";".
2. 用"{\n"替换"{","\n}"替换"}".

*** 4.9.3 工作原理
通过执行下面的步骤压缩Javascript:
1. 移除'\n'和'\t':
   #+begin_src bash
     tr -d '\n\t';
   #+end_src
2. 移除多余的空格:
   #+begin_src bash
     tr -s ' '
     //或者
     sed 's/[ ]\+/ /g'
   #+end_src
3. 移除注释:
   #+begin_src bash
     sed 's:/\*.*\*::g'
   #+end_src

   * 因为我们需要使用/*和*/,所以以冒号作为sed的定界符,这样就不必对
     /进行转义了.

   * *在sed中被转义为\*

   * .*用来匹配/*与*/之间所有的文本
4. 移除{,},(,),;,:以及逗号前后的所有空格.
    #+begin_src bash
      sed 's/ \?\([{ }();,:]) \?/\1/g'
    #+end_src

    上面的sed语句含义如下所示.

   * sed代码中的/ \?\([{ }();,:]\) \?/用于匹配, /\1/g用
     于替换.

   * \([{}();,:]\)用于匹配集合[ { }( ) ; , : ]中的任
     意一个字符.\(和\)是分组操作符.用于记忆所匹配的内容,以便在
     替换备份中进行向后引用.对(和)转义之后,它们便具备了另一种特
     殊的含义,进而可以将它们作为分组操作符.位于分组操作符前后的\?
     用来匹配可能出现在字符集和前后的空格

   * 在命令的替换部分,匹配字符串(也就是一个可选地空格,一个来自字符
     集的字符再加一个可选的空格)被匹配字符所替换.对于匹配字符,替换
     部分使用了向后引用,并通过组操作符()记录了匹配的字符内容.可以用
     符号\1向后引用分组匹配的内容.

用管道将上面的步骤按照下列方式组合起来:
    #+begin_src bash
      cat sample.js | tr -d '\n\t' | tr -s ' ' \
      | sed 's:/\*.*\*::g' \
      | sed 's/ \?\([{}();,:]\) \?/\1/g'
    #+end_src

接下来,写一个可以将这些混乱的代码恢复正常的解压缩脚本:
    #+begin_src bash
      cat obfuscated.txt | sed 's/;/;\n/g; s/{/{\n\n/g; s/}/\n\n}/g'
      //或者
      cat obfuscated.txt | sed 's/;/;\n/g' | sed 's/{/{\n\n/g' | sed 's/}/\n\n}/g'
    #+end_src

    在上面的命令中:
    * s/;/;\n/g 将;替换为\n;
    * s/{/{\n\n//g 将{替换为{\n\n
    * s/}/\n\n}/g 将}替换为\n\n}

** 4.10 对文件中的行,单词和字符进行迭代
编写不同的文本处理和文件操作脚本时,通常需要对文件中的字符,单词和行
进行迭代.尽管这是一个很简单的操作,但是我们也会犯一些低级的错误,使
所得的输出结果与期望的大相径庭.这则攻略将帮助你学习这方面的知识.
*** 4.10.1 预备知识
将一个简单的循环用于迭代,再加上来自stdin或文件的重定向,这就是对
文件中的行,单词和字符进行迭代的基本方法.
*** 4.10.2 实战演练
在这里,我们要讨论对行,单词和字符进行迭代时所需执行的三个步骤.让我们看看
哥哥步骤是如何完成的.
1. 迭代文件中的每一行
   我们可以用一个while循环从标准输入中读取,因此,它在每一次迭代中
   都会读取一行.
   下面的方法可以将stdin重定向到文件:
     while read line;
     do
     echo $line;
     done < file.txt

    使用子shell的方法如下:
    cat file.txt | ( while read line; do echo $line; done)
    命令中的cat file.txt可以使用任何命令序列的输出来替换.

    注释:使用括号()组合一系列命令时.例如(ls;date;echo haha),
    独立的括号将会开启一个子shell来执行括号内的命令。

2. 迭代一行中的每一个单词
   我们用一个while循环迭代各行中的单词:
   #+begin_src bash
     for word in $line;
     do
     echo $word;
     done
   #+end_src

3. 迭代一个单词中的每一个字符
   我们利用一个for循环对变量i进行迭代,迭代范围从0到字符串的长度
   在每一次迭代中,可以用一个特殊的记法
   ${string:start_position:No_of characters}
   从字符串中提取一个字符

*** 4.10.3 工作原理
从文件中读取行或从行中读取单词,都是很直观的操作.不过,从单词中读取
字符就需要点技巧了,为此,我们采用子串提取技术.
${word:start_position:no_of_characters}返回变量word所包含的
字符串中的一个子串.
${#word} 返回变量word的长度.

** 4.11 按列合并文件
很多时候我们需要按列拼接文件,比如要将每一个文件的内容作为单独的一列.
而cat命令所实现的拼接通常是按照行来进行的.
*** 工作原理
可以用paste命令实现按列拼接,其语法如下:
  paste file1 file2 file3

让我们来尝试一下:
#+begin_src bash
  cat paste1.txt
#+end_src

#+begin_src bash
  cat paste2.txt
#+end_src

#+begin_src bash
  paste paste1.txt paste2.txt
#+end_src

#+RESULTS:
| 1 | slynux |
| 2 | gnu    |
| 3 | bash   |
| 4 | hack   |
| 5 |        |

默认的定界符是制表符,也可以用-d明确指定定界符,例如:
#+begin_src bash
  paste -d ":" paste1.txt paste2.txt
#+end_src


** 4.12 打印文件或行中的第n个单词或列
我们可能有一个包含了多列数据的文件,不过只有其中的一小部分能派上用场
为了只打印相关的列或字段,我们得进行过滤.
*** 4.12.1 预备知识
处理这种任务最为广泛的方法就是借助awk.当然,用cut也可以.
*** 4.12.2 实战演练
用下面的命令打印第5列:
  awk '{ print $5 }' filename

也可以打印多列数据,并在列间插入指定的字符串.
比如,要打印当前目录下个文件的权限和文件名,可以使用:
#+begin_src bash
  ls -l | awk '{ print $1" : " $9 }'
#+end_src

** 4.13 打印不同行或样式之间的文本
有时候,可能需要根据某些条件打印文本的某一部分,比如行号范围以及由起
止样式所匹配的文本范围等.让我们来看看如何实现这些需求.

*** 4.13.1 预备知识
我们可以用awk,grep和sed这类工具来根据条件打印某些文本区域.不过,
我仍然觉得awk是最简单明了的方法.下面就看看如何使用awk来完成这项任务.

*** 4.13.2 实战演练
要打印出从M行到N行这个范围内的所有文本,使用下面的语法:
  awk 'NR==M, NR==N' filename

也可以用stdin作为输入:
  cat filename | awk 'NR==M, NR==N'

把M和N换成具体的数字:
#+begin_src bash
  seq 100 | awk 'NR==4, NR==6'
#+end_src

要打印处于start_pattern与end_pattern之间的文本,使用下面的语法:
  awk '/start_pattern/, /end_pattern/' filename

例如:
#+begin_src bash
  cat section.txt
#+end_src

#+begin_src bash
  awk '/pa.*3/, /end/' section.txt
#+end_src

用于awk中的样式为正则表达式.

** 4.14 用脚本检验回文字符串
初次C语言编程实验课中的一个练习就是检验某个字符串是否为回文.这则攻略
的目的就是为了告诉你如何解决类似的问题,即如何在文本中重复匹配之前的样
式.
*** 4.14.1 预备知识
sed命令能够记住之前匹配的子样式.这被称为反向引用.
我们可以借助这项功能解决回文问题.而在Bash中,这个问题的解决方法也不止
一种.
*** 4.14.2 工作原理
sed能够记得之前匹配的正则表达式,这样一来,我们就可以判断字符串中是否
存在重复的字符.这种能够记忆并引用之前所匹配样式的能力就是所谓的反向
引用.

让我们看看如何利用反向引用轻松地解决之前的回文问题.例如:
  sed -n '/\(.\)\1/p' filename

\(.\)的作用是记录()中的子串.这里出现的.(点号)是sed用于匹配单个字符
的正则表达式.

\1对应()中匹配的第一处内容,\2对应第二处匹配,因此我们就可以记录多个()
所匹配的内容.()以\(\)的形式出现,表明(和)并不是普通的字符,而是有着
特殊的含义.

这条sed语句会打印出所有匹配样式的连续的两个相同的字符.

所有的回文字结构特征如下.
- 如果字符数是偶数,那么它在结构上表现为:一个字符序列连另一个字符相同
  但次序恰好相反的字符序列.
- 如果字符是奇数,那么它在结构上表现为:一个字符序列连另一个字符相同但
  次序恰好相反的字符序列,但是这两个序列中间共享一个相同的字.

因此,要能够同时匹配这两种结构,我们在编写正则表达式时,需要使其中有一
个可选的字符.

能够匹配包含3个字符的回文字的sed正则表达式类似于下面的形式:
'/\(.\).\1/p'
我们在字符序列机器逆序之间加了一个额外的字符(.).

下面让我们来编写一个能够匹配任意长度的回文的脚本:

将字典文件作为输入获取一个给定长度的回文字列表,例如:
#+begin_src bash
  ./match_palindrome.sh /usr/share/dict/birtish-endlish 4
#+end_src

*** 4.14.3 工作原理
这些脚本的工作过程很简单.大多数的工作都是用来生成用于sed的正则表达式
以及反向引用.
不妨通过一些例子来看看这个脚本是如何工作的.

- 如果你想匹配一个字符,并对它进行反向引用,可以用\(.\)匹配单个字符,
  再用\1引用它.因此,要匹配一个双字符的回文并打印,我们使用:
    sed '/\(.\)\1/p'
  为了指明必须从行首开始进行匹配,我们加入了行首标记^,于是,上面的命令
  变成了sed '/^\(.\)\1/p'.其中,/p用于打印匹配内容.
- 如果我们要匹配4个字符的回文,则使用:
    sed '/^\(.\)\(.\)\2\1/p'
  我们用了2个\(.\)匹配并记录回文中前两个字符.sed会记住所有位于\(和\)
  中的匹配内容并能够反向引用它们.\2\1用来对所匹配的字符以相反的顺序进
  行反向引用.

  在上面的脚本中,我们用到了一个被称为basepattern的变量,它包含了用于
  sed脚本的部分内容.

  根据回文中字符的数量,我们利用一个for循环生成匹配样式.

  basepattern最初被初始化为basepattern='/^\(.\)',它对应匹配一个
  单字符.for循环用来拼接\(.\)和basepattern,循环次数为回文长度的一
  半.
  然后再用一个for循环以逆序的形式将反向引用拼接起来(比如'\4\3\2\1')
  ,循环次数为回文长度的一半.最后,为了支持奇数长度的回文,在正则表达式
   
  与反向引用之间加上一个可选的字符.(.).

  按照这种方法,就可以创建出用于匹配回文的sed匹配样式.这个匹配样式能
  够用来从字典文件中找出回文.

  在先前的脚本中,我们用for循环生成sed命令的匹配样式.其实这个样式没
  必要单独生成,sed可以利用标签和goto自行实现循环结构.作为一门非常
  给力的语言,sed只需要使用一个复杂的单行脚本,就可以完成回文检查的任
  务.

  如果要从头解释就说来话长了.先动手试试下面的脚本:
  #+begin_src bash
    word="malayalam"
    echo $word | sed ':loop ; s/^\(.\)\(*\)\1\2/;\
     t loop; /^.\?$/{ s/.*/
    PALINDROME/ ; q; }; s/.*/NOT PALINDROME/'
  #+end_src

  如果你对sed脚本非常感兴趣,不妨看看一本专门讲解sed和awk的参考书,
  即由DaleDougherty和ArnoldRobbins所著的<<sed和awk(第二版)>>
 
***  4.14.4 补充内容
下面来看看与该任务相关的其他选项或是内容.

最简单直接的方法

检查一个字符串是否是回文的最简单的方法就是使用rev命令.

rev命令接收一个文件或stdin作为输入,并逆序打印出每一行内容.

试试下面的代码:
#+begin_src bash
  string="malayalam"
  if [[ "$string" == "$(echo $string | rev )" ]];
  then
  echo "Palindrome"
  else
  echo "Not palindrome"
  fi
#+end_src

rev命令可以结合其他命令来解决不同的问题.来看一个将句中所有单词顺序
反转的例子:
#+begin_src bash
    sentence='this is line from sentence'
    echo $sentence | rev | tr ' ' '\n' | tac | \
    tr '\n' ' ' | rev
#+end_src





** 4.15 以逆序形式打印行
这一节的内容很简单.这里讲的东西可能看起来没什么用,不过它可以用来在
bash中模拟栈结构.所以这节还是有些意思的.下面我们要将一个文件中的文本
行以逆序形式打印出来.

*** 4.15.1 预备知识
只需要用点awk的小技巧就能完成这项任务.不过,命令tac可以直接做到
同样的事.这个命令的名称其实就是反过来书写的cat.

*** 4.15.2 实战演练
先来试试tac.该命令的语法如下:
tac file1 file2 ...

它也可以从stdin中读取:
#+begin_src bash
  seq 5 | tac
#+end_src

在tac中,\n是默认的行分隔符.但我们也可以用-s"分隔符"选项指定自己的
分隔符.

使用awk的实现方式如下:
#+begin_src bash
    awk '{ lifo[NR]=$0; lno=NR }'
    END{ for(;lno>-1;lno--){ print lifo[lno]; } }'
#+end_src

在shell脚本中,\可以很方便地将单行命令分解成多行.

*** 4.15.3 工作原理

这个awk脚本非常简单.我们将每一行都存入一个关联数组中,用行号作为数组
索引(行号由NR给出),最后由awk执行END语句块.为了得到最后一行的行号,
在{}语句块中使用lno=NR.因此,这个脚本从最后一行一直迭代到第0行,将
存储在数组中的各行以逆序方式打印出来.

** 4.16 解析文本中的电子邮件地址和URL
从给定的文件中解析出所需要的文本是我们从事文本处理时常见的一项任务.
诸如电子邮件地址,URL等都能够借助适合的正则表达式找出来.在大多数情况
下,我们需要从一个包含大量无关字符及单词的电子邮件客户列表或html网页
中将电子邮件地址解析提取出来.

*** 4.16.1 预备知识
这个问题可以用egrep解决.

*** 4.16.2 实战演练
能够匹配一个电子邮件地址的egrep正则表达式如下:
  [A-Za-z0-9.]+@[A-Za-z0-9.]+\.[a-zA-Z]{2,4}

例如:
#+begin_src bash
    egrep -o '[A-Za-z0-9.]+@[A-Za-z0-9.]+\.[a-zA-Z]{2,4}' \
    url_email.txt
#+end_src

匹配一个HTTP URL的egrep正则表达式如下:
http://[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,4}

例如:
#+begin_src bash
    egrep -o "http://[a-zA-Z0-9.]+\.[a-zA-Z]{2,3}" \
    url_email.txt
#+end_src

*** 4.16.3 工作原理
如果逐个部分进行设计的话,这些正则表达式其实很简单.在匹配电子邮件
地址的正则表达式中,我们都知道电子邮件地址可以采用
name@domain.some_2-4_letter这样的形式.那么,在编写正则表达式时,
也要遵循同样的规则:
[A-Za-z0-9.]+@[A-Za-z0-9.]+\.[a-zA-Z]{2,4}
[A-za-z0-9.]+表示在表示字面意义的字符@出现之前,[]中的字符组合
应该出现一次或多次(这也是+的含义).然后[A-Za-z0-9.]同样应该出现
一次或多次(+).样式\.表示应该呈现一个表示字面意义的"."(点好),而
[a-zA-Z]{2,4}表示字母的长度应该在2到4之间(包括2和4).

匹配HTTP URL与匹配电子邮件地址类似,只是不需要匹配name@部分.
http://[a-zA-Z0-9.]+\.[a-zA-Z]{2,3}

** 4.17 打印文件中某个样式之前或之后的n行
** 4.18 在文件中移出包含某个单词的句子
** 4.19 用awk实现head,tail和tac
** 4.20 文本切片与参数操作
在文本处理中经常需要打印由样式匹配的某个文本区域.有时候,我们也许会
需要位于样式之前或之后的若干行文本.例如有一个文件包含了电影演员的评
级情况,文件中的每一行都对应一位电影演员的详细信息,而我们需要从中找
某位演员的评级以及最接近这位演员的其他演员的详细信息.来看看如何实现
这个需求.
*** 4.17.1 预备知识
grep是在文件中搜索文本的最佳工具.通常,grep会打印出匹配给定样式的文
本行或文本.不过grep的前后行(context line)控制选项使它可以打印出
位于样式匹配行之前,之后的或者同时包含前后的文本行.
*** 4.17.2 实战演练
这个技巧最好通过一个电影演员名单来讲解.例如:
#+begin_src bash
  cat actress_rankings.txt | head -n 20
#+end_src

要打印出匹配"Cameron Diaz" actress_rankings.txt(A:after)
#+begin_src bash
  grep -A 3 "Cameron Diaz" actress_rankings.txt
#+end_src

要打印出匹配行及之前的3行,使用下面的命令(B:before):
#+begin_src bash
  grep -B 3 "Cameron Diaz" actress_rankings.txt
#+end_src

打印出匹配行及之前的2行和之后的两行,使用下面的命令:
#+begin_src bash
  grep -C 2 "Cameron Diaz" actress_rankings.txt
#+end_src

你是否还在想我是从哪里搞到这些评级信息的?

我可是曾经只使用基本的sed,awk和grep命令就解析了一个包含大量图片
和HTML内容的网站.详情请参阅第五章.
*** 4.17.3 参考
4.3节讲解了grep命令.

** 4.18 在文件中移出包含某个单词的句子
只要能写出正确的正则表达式,移出包含某个单词的句子简直就是就是手到擒
来.
这里给出了一个解决类似问题的练习.
*** 4.18.1 预备知识
sed是进行文本替换掉不二之选.这样,我们就可以通过sed用空白替代匹配的
句子.
*** 4.18.2 实战演练
先创建一个包含替换文本的文件.例如:
#+begin_src bash
  cat sentence.txt
#+end_src

我们的目标是移除包含单词"mobile phones"的句子.用下面的sed语句来
完成这项任务:
#+begin_src bash
  sed 's/ [^.]*mobile phones[^.]*\.//g' sentence.txt
#+end_src

*** 4.18.3 工作原理
让我们分析一下sed的正则表达式's/ [^.]*mobile phones[^.]*\.//g
'.

该正则表达式的格式为: ' s/匹配样本/替代字符串/g '
它将与匹配样本相匹配的每一处内容都用替代字符串进行替换.
这里的匹配样本是用来匹配依据文本的正则表达式.文件中的每一句话第一
个字符都是空格,句与句之间都以"."来分隔.因此我们需要匹配内容的格式
就是: 空格+若干文本+需要匹配的字符串+若干文本+句点.一个句子除了作
为定界符的句点之外,可以包含任意字符.因此我们要使用[^.]. [^.]*
可以匹配除句点之外的任何字符的组合.用来匹配文本的"mobile"被放置在
连个[^.]*之间.每一个匹配的句子均被//替换(注意,/与/之间没有任何内容
).

** 4.19 用awk实现head,tail和tac
只有通过时间才能够掌握文本处理的各种操作.这则攻略将帮助你综合运用
之前学过的一些命令.
*** 4.19.1 预备知识
命令head,tail,uniq和tac都是逐行操作的.不管什么时候,只要我们需要
进行逐行处理,我们都可以用awk来解决.接下来让我们利用awk模拟这些命令

模拟head命令读取文件前10行并打印出来:
#+begin_src bash
  awk 'NR<=10' filename
#+end_src

模拟tail命令打印文件的后10行:
#+begin_src bash
    awk '{ buffer[NR % 10 ] = $0; } END{ for(i=1;i<11;\
    i++){print buffer[i%10] }}' filename
#+end_src

模拟tac命令逆序打印输入文件的所有行:
#+begin_src bash
    awk '{ buffer[NR] = $0; } END { for(i=NR; i>0; \
    i--) { print buffer[i] } }' filename
#+end_src

*** 4.19.3 工作原理
在head的awk实现中,我们打印输入流中行号小于或等于10的行.行号可以
通过特殊变量NR获得.

在tail命令的实现中,我们使用了散列技术.数组buffer的索引是由散列
函数NR%10决定的,其中变量NR包含了当前行的行号,$0包含了当前的文本
行.因此,%将所有余数相同的行都映射到一个特定的数组索引中.在END{}
语句块中,对数组的10个索引进行迭代,并打印出对应的行.

在tac命令的实现中,只是将所有的行存入一个数组中.当程序流程进入END
{}语句块时,NR存储着最后一行的行号.然后再for循环中对NR递减到1,并在
每一次循环中打印存储的行.









** 4.20 文本切片余参数操作
这则攻略考查了一些简单的文本替换技术以及bash中可用的参数扩展简写法.
这些简单的技巧通常能够让我们免于敲入多行代码之苦.
*** 4.20.1 实战演练
就用下面的任务练练手吧.
替换变量内容中的部分文本:
#+begin_src bash
  var="This is a line of text"
  echo ${var/line/REPLACED}
#+end_src

line被REPLACED替换.
我们可以通过制定字符串的起始位置和长度来生成子串,语法如下:
${variable_name:start_position:length}

用下面的命令可以打印第5个字符之后的内容:
#+begin_src bash
  string=abcdefghijklmnopqrstuvwxyz
  echo ${string:4}
#+end_src

从第5个字符开始,打印8个字符:
#+begin_src bash
  string=abcdefghijklmnopqrstuvwxyz
  echo ${string:4:8}
#+end_src

起始字符的索引从0开始计数.我们也可以从后向前计数,将最后一个字符索引
记为-1.但如果使用负数作为索引值的话,必须将负数放入括号内,例如:
(-1)就是最后一个字符的索引.
#+begin_src bash
  string=abcdefghijklmnopqrstuvwxyz
  echo ${string:(-1)}
  echo ${string:(-2):2}
#+end_src

